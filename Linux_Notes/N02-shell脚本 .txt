shell脚本
shell脚本是在linux上的一个可执行的文件，它一共包含三种格式
    #!/bin/bash
    #!/bin/sh
    #!/bin/ksh(不常用)
   一般以.sh结尾
脚本编写和使用
1.创建脚本文件
 vim 
 touch
2.给脚本文件赋执行权限
chmod 755 脚本路径
3.执行脚本
 (1) 使用sh命令执行脚本 
     sh 脚本路径
 (2) 使用./执行脚本
     首先需要进入到脚本所在路径

[root@oracle ~]# vim hello.sh
[root@oracle ~]# cat hello.sh 
#!/bin/bash
echo Hello World
[root@oracle ~]# chmod 755 hello.sh 
[root@oracle ~]# ls -l
总用量 4
-rwxr-xr-x 1 root root 29 1月  22 09:22 hello.sh
运行脚本：
   (1)sh运行
[root@oracle ~]# sh hello.sh 
Hello World
   (2)./脚本名称
[root@oracle ~]# ./hello.sh 
Hello World

脚本中变量的使用:
变量名=值    #默认变量的值全是字符中类型

取变量的值：
$变量名 或者 ${变量名}

[root@oracle ~]# vs=nihao
[root@oracle ~]# echo $vs
nihao
[root@oracle ~]# echo ${vs}
nihao

字符串类型的表示：
  可以不使用符号
  可以使用单引号
  也可以使用双引号
[root@oracle ~]# a='Hello'
[root@oracle ~]# echo $a
Hello
[root@oracle ~]# b="world"
[root@oracle ~]# echo $b
world

单引号和双引号的区别：单引号中所有的字符都是普通字符，
                      双引号中的字符可以表示特殊含义（$表示取变量的值）
		     $在单引号中就是$符号，在双引号中它是取变量的符号
[root@oracle ~]# vim par.sh
#!/bin/bash
#声名一个变量
s=haha
echo '单引号中的$s'
echo "双引号中的$s"
[root@oracle ~]# chmod 755 par.sh 
[root@oracle ~]# sh par.sh 
单引号中的$s
双引号中的haha

#!/bin/bash
#声名一个变量
s=haha
echo '单引号中的$s'
echo "双引号中的$s"
echo $snihao
echo ${s}niha

数字类型：
[root@oracle ~]# a=1+2
[root@oracle ~]# echo $a
1+2
[root@oracle ~]# let a=1+2
[root@oracle ~]# echo $a
3
[root@oracle ~]# declare -i a
[root@oracle ~]# a=2+3
[root@oracle ~]# echo $a
5
[root@oracle ~]# a=$((4*5))
[root@oracle ~]# echo $a
20

1.使用let命令，可以让变量后面的数学表达式进行运算
2.使用declare -i 声名的变量，认为是数字变量，后面的数学表达式会进行计算
3.使用$((数学表达式)) 可以获取到一个数学表达式的结果


shell脚本的参数
$0:表示取脚本的名称
$n:表示取脚本的第n个参数，n是一个自然数
$1:表示取第1个参数
$2:表示取第2个参数
$3:表示取第3个参数
$*:表示取所有参数
$#:表示取参数个数
$?:表示取上一条命令的执行结果，是一个数字类型
$$:表示取当前脚本的进行id

shell脚本的传参方式
sh 脚本路径 参数1 参数2 参数3 参数4 参数5 ...
./脚本名称  参数1 参数2 参数3 ....

[root@oracle ~]# vim vars.sh
#!/bin/bash
echo '输出脚本的名称$0:'$0
echo '输出脚本的第1个参数$1:'$1
echo '输出脚本的第2个参数$2:'$2
echo '输出脚本的第3个参数$3:'$3
echo '输出脚本的参数个数$#:'$#
echo '输出脚本的所有参数$*:'$*
echo '输出$$:'$$
[root@oracle ~]# chmod 755 vars.sh
[root@oracle ~]# sh vars.sh 1 2 3 4 5 6 7 8 9 10
输出脚本的名称$0:vars.sh
输出脚本的第1个参数$1:1
输出脚本的第2个参数$2:2
输出脚本的第3个参数$3:3
输出脚本的参数个数$#:10
输出脚本的所有参数$*:1 2 3 4 5 6 7 8 9 10
输出$$:3345


shell脚本中的条件表达式

[]:一般用来写字符串判断的条件，当前也可以用来判断文件等，表达式和符号之间必须有空格
[[]]:可以写[]中的所有条件，还可以进行数学上的比较
(()):只能用户数学表达式的条件

>,<,>=,<=,!=,==, !（取反）

数字类型的表达式：
   -eq:表示相等
   -lt:表示小于
   -gt:表示大于
   -le:表示小于等于
   -ge:表示大于等于
   -ne:表示不等于
字符串类的：
   -n:当字符串不为空时，返回true,否则返回false
   -z:和-n相反
文件类:
   -e:判断一个路径是否存在，如果存在返回true,否则返回false
   -d:判断一个路径是否是一个目录，如果是目录返回true,否则返回false
   -f:判断一个路径是否是一个文件，如果是文件返回true，否则返回false
[root@oracle ~]# [[ aaa == "aaa" ]]
[root@oracle ~]# echo $?
0
[root@oracle ~]# [[ 1 -gt 0 ]]
[root@oracle ~]# echo $?
0
[root@oracle ~]# [[ 2 -gt 3 ]]
[root@oracle ~]# echo $?
1
[root@oracle ~]# [[ -e /root/a ]]
[root@oracle ~]# echo $?
1
[root@oracle ~]# ls
hello.sh  par.sh  vars.sh
[root@oracle ~]# [[ -e /root ]]
[root@oracle ~]# echo $?
0
[root@oracle ~]# [[ -e /root ]]
[root@oracle ~]# echo $?
0
[root@oracle ~]# [[ -f vars.sh ]]
[root@oracle ~]# echo $?
0
[root@oracle ~]# mkdir a b c
[root@oracle ~]# [[ -f a ]]
[root@oracle ~]# echo $?
1
[root@oracle ~]# [[ -d a ]]
[root@oracle ~]# echo $?
0
[root@oracle ~]# [[ -z $z ]]
[root@oracle ~]# echo $?
0
[root@oracle ~]# z=abc
[root@oracle ~]# [[ -z $z ]]
[root@oracle ~]# echo $?
1
[root@oracle ~]# [[ -n $z ]]
[root@oracle ~]# echo $?
0
[root@oracle ~]# ((3>2))
[root@oracle ~]# echo $?
0
[root@oracle ~]# b=2
[root@oracle ~]# c=3
[root@oracle ~]# ((b>c))
[root@oracle ~]# echo $?
1
[root@oracle ~]# ((b<c))
[root@oracle ~]# echo $?
0


(())里的表达式不需要有空格[[]]和[]里面的条件表达式必须有空格
(())里面取变量值时不需要$ [[]]里面取变量值时需要使用$符号

条件连接符：
   -a:表示and
   -o：表示or
   以上两个符号用在[]

   &&:表示and
   ||:表示or
   以上两个符号可以使用在[[]]和(())
[root@oracle ~]# [ abc = cde -a ccc = ccc ]
[root@oracle ~]# echo $?
1
[root@oracle ~]# [ abc = cde -o ccc = ccc ]
[root@oracle ~]# echo $?
0
[root@oracle ~]# [[ 4 -gt 3 &&  2 -lt 3 ]]
[root@oracle ~]# echo $?
0
[root@oracle ~]# [[ 4 -gt 3 ||  2 -lt 3 ]]
[root@oracle ~]# echo $?
0
[root@oracle ~]# [[ 4 -lt 3 || 2 -gt 3 ]]
[root@oracle ~]# echo $?
1
[root@oracle ~]# ((3>2&&2>3))
[root@oracle ~]# echo $?
1
[root@oracle ~]# ((3>2||2>3))
[root@oracle ~]# echo $?
0

test 条件表达式
[root@oracle ~]# test 3 > 2
[root@oracle ~]# echo $?
0
[root@oracle ~]# test aaa = bbb
[root@oracle ~]# echo $?
1
[root@oracle ~]# test aaa = aaa
[root@oracle ~]# echo $?
0


1.流程控制语句
（1）if语句
语法：
if 条件表达式; then
   语句;
fi

if 条件表达式
then
   语句;
fi

[root@oracle ~]# vim if.sh
#!/bin/bash
#判断是否传入参数，如果没有传入参数，打印“没有传入参数”,并退出程序
if [[ $# -lt 1 ]];then
   echo 没有传入参数
   #exit表示结束程序
   exit
fi

[root@oracle ~]# chmod 755 if.sh
[root@oracle ~]# sh if.sh
没有传入参数
[root@oracle ~]# sh if.sh A

(2)if else语句
语法：
if 条件表达式;then

else
   
fi
if 条件表达式
then

else

fi

--写一个脚本从键盘输入两个数，比较两个数的大小

read 命令
read -p 输入提示符 变量  #将输入的内容保存到变量中
[root@oracle ~]# read -p 请输入一个值 a
请输入一个值1234
[root@oracle ~]# echo $a
1234
[root@oracle ~]# read -p 请输入一个值 b
请输入一个值qwer
[root@oracle ~]# echo $b
qwer
[root@oracle ~]# vim else.sh
#!/bin/sh
#输入两个值
read -p 输入x的值： x
read -p 输入y的值:  y
#判断两个数的大小，并打印较大的
if ((x>y));then #if [[ $x -gt $y ]]; then
   echo "x是比较大的值:$x"
else
   echo "y是比较大的值:$y"
fi
[root@oracle ~]# chmod 755 else.sh
[root@oracle ~]# sh else.sh 
输入x的值：123
输入y的值:33
x是比较大的值:123

(3)if elif语句
if 条件表达式;then

elif 条件表达式;then

....

else

..
fi
--写一个脚本，输入一个成绩，打印考试等级
[root@oracle ~]# vim el.sh
#!/bin/bash
#从键盘输入一个成绩
read -p 请输入一个成绩： score
if ((score<60));then
   echo 不及格
elif ((score<70));then
   echo 及格
elif ((score<80));then
   echo 良好
else
   echo 优秀
fi

[root@oracle ~]# chmod 755 el.sh 
[root@oracle ~]# sh el.sh 
请输入一个成绩：77
良好
[root@oracle ~]# sh el.sh 
请输入一个成绩：88
优秀
[root@oracle ~]# sh el.sh 
请输入一个成绩：60
及格

(4)case语句
语法：
case 表达式 in
值1):
  ..
;;
值2):
  ..
;;
值3):
  ..
;;
*):
  ...
esac

*:相当于else,*表示有任意个任意字符
[]:表示取一个值

[root@oracle ~]# vim case.sh
#!/bin/bash
read -p 输入一个动物名称 name
case $name in
dog):
  echo "it is a dog"
;;
[Cc]at):
  echo "it is a cat"
;;
ti*er):
  echo "it is a tiger"
;;
pig):
  echo "it is a pig"
;;
*):
  echo "it is other animal"
esac

[root@oracle ~]# chmod 755 case.sh
[root@oracle ~]# sh case.sh 
输入一个动物名称cat
it is a cat
[root@oracle ~]# sh case.sh 
输入一个动物名称Cat
it is a cat
[root@oracle ~]# sh case.sh 
输入一个动物名称tiger
it is a tiger
[root@oracle ~]# sh case.sh 
输入一个动物名称tigggggggggger
it is a tiger
[root@oracle ~]# sh case.sh 
输入一个动物名称tiaklsdjf;lakdsjf;alksdjf;laksdjfkaljsdf;adser
it is a tiger
[root@oracle ~]# sh case.sh 
输入一个动物名称pg
it is other animal
[root@oracle ~]# sh case.sh 
输入一个动物名称pig
it is a pig

(5) while循环语句
while 循环条件
do
   循环体语句
   循环控制语句
done

#打印1~9
[root@oracle ~]# vim while.sh
#!/bin/bash
#声名一个循环变量n
declare -i n=1
while ((n<=9))
do
   echo $n
   n=$((n+1)) #let n=$n+1
done

[root@oracle ~]# chmod 755 while.sh 
[root@oracle ~]# sh while.sh 
1
2
3
4
5
6
7
8
9
(6)until循环
until 退出循环条件
do
   循环体语句
   循环控制语句
done

#循环打印1~9
[root@oracle ~]# vim until.sh
#!/bin/bash
#声名循环变量
n=1
until ((n>9))
do
  echo $n
  let n=$n+1
done

[root@oracle ~]# chmod 755 until.sh 
[root@oracle ~]# sh until.sh 
1
2
3
4
5
6
7
8
9

(7)for循环
for 循环变量 in 集合
do
   循环体语句
done

#打印1~9
[root@oracle ~]# vim for1.sh
#!/bin/bash
for n in 1 2 3 4 5 6 7 8 9
do
   echo $n
done

[root@oracle ~]# chmod 755 for1.sh 
[root@oracle ~]# sh for1.sh 
1
2
3
4
5
6
7
8
9


seq命令 产生一个序列
seq 初始值 结束值

$(命令)：取到一个命令的执行结果
``:取一个命令的执行结果
[root@oracle ~]# vim for2.sh
#!/bin/bash
for n in $( seq 1 9 )
do
  echo $n
done

[root@oracle ~]# chmod 755 for2.sh 
[root@oracle ~]# sh for2.sh 
1
2
3
4
5
6
7
8
9
#!/bin/bash
for n in `seq 1 9`
do
  echo $n
done

#使用while循环读取文件内容
read命令

while read 变量
do
  
done<文件路径

<:将文件内容传前面的命令

[root@oracle ~]# vim f1.sh
#!/bin/bash
while read line
do
   echo $line
done<while.sh
[root@oracle ~]# chmod 755 f1.sh
[root@oracle ~]# sh f1.sh 
#!/bin/bash
#声名一个循环变量n
declare -i n=1
while ((n<=9))
do
echo $n
n=$((n+1)) #let n=$n+1
done


[root@oracle ~]# vim f1.sh
#!/bin/bash
#声名一个变量记录行号
declare -i n=0
while read line
do
   n=$((n+1))
   echo $n--$line
done<while.sh
[root@oracle ~]# sh f1.sh 
1--#!/bin/bash
2--#声名一个循环变量n
3--declare -i n=1
4--while ((n<=9))
5--do
6--echo $n
7--n=$((n+1)) #let n=$n+1
8--done


#for循环读取文件内容
for 变量 in `cat 文件路径`
do

done

IFS:系统变量表示文件的结束符
[root@oracle ~]# vim f2.sh
#!/bin/bash
for line in `cat while.sh`
do
  echo $line
done
[root@oracle ~]# chmod 755 f2.sh 
[root@oracle ~]# sh f2.sh 
#!/bin/bash
#声名一个循环变量n
declare
-i
n=1
while
((n<=9))
do
echo
$n
n=$((n+1))
#let
n=$n+1
done

[root@oracle ~]# vim f2.sh 
#!/bin/bash
#在读取文件前，将文件的行结束符修改为换行，改之前需要备份原有结束符
bak=$IFS #备份结束符
#将结果符修改为\n
IFS=$'\n'
for line in `cat while.sh`
do
  echo $line
done
#将结束符修改回原来的值
IFS=$bak
[root@oracle ~]# sh f2.sh 
#!/bin/bash
#声名一个循环变量n
declare -i n=1
while ((n<=9))
do
   echo $n
   n=$((n+1)) #let n=$n+1
done

#使用for循环来遍历一个目录下的所有文件，打印文件名
#传入一个目录路径，查看当前目录下的所有文件
[root@oracle ~]# vim for4.sh
#!/bin/bash
#检查参数
if [[ $# -lt 1 ]];then
   echo 没有传入参数
   exit  #表示退出程序
fi
#检查传入参数是不是一个目录
if [[ -d $1 ]];then
   #如果是目录访问目录下的所有文件
   for f in $1/*   #/*表示目录下的所有文件（包括目录和文件）
   do
     echo $f
   done
else
   #如不是目录打印它不是目录
   echo "$1"不是一个目录
fi
[root@oracle ~]# chmod 755 for4.sh 
[root@oracle ~]# sh for4.sh 
没有传入参数
[root@oracle ~]# sh for4.sh /root
/root/f1.sh
/root/f2.sh
/root/for1.sh
/root/for2.sh
/root/for4.sh
/root/until.sh
/root/while.sh
[root@oracle ~]# sh for4.sh .
./f1.sh
./f2.sh
./for1.sh
./for2.sh
./for4.sh
./until.sh
./while.sh
[root@oracle ~]# sh for4.sh f1.sh
f1.sh不是一个目录
#shell脚本递归调用
#写一个脚本，传入一个路径，判断该路径是否为目录，如果是目录输出 目录路径：路径，并且查找目录下的所有文件
#如果是文件那么输出所有文件的行数
[root@oracle ~]# vim f4.sh
#!/bin/bash
#检查是否传入参数
if [[ $# -lt 1 ]];then
   echo 没有传入参数
   exit
fi
#判断输入的路径是否存在
if [[ ! -e $1 ]];then
   echo 路径不存在
   exit
fi
#判断是目录还是文件
if [[ -f $1 ]];then
   #如果是文件，输出文件的行数
   n=$( wc -l $1 | awk '{ print $1 }' )
   echo $1・・・$n
else
   #如果是目录
   #打印目录名
   echo 目录名:$1
   #访问目录下的文件
  # for f in $1/*
  # do
  #     if [[ -f $f ]];then
        #文件的处理方式
  #     else
        #目录的处理
  #     fi
  # done
   #脚本的递归调用
   for f in $1/*
   do
     sh $0 $f
   done
fi
[root@oracle ~]# chmod 755 f4.sh
[root@oracle ~]# ls
f1.sh  f2.sh  f4.sh  for1.sh  for2.sh  for4.sh  until.sh  while.sh
[root@oracle ~]# mkdir -p a/b/c
[root@oracle ~]# ls
a  f1.sh  f2.sh  f4.sh  for1.sh  for2.sh  for4.sh  until.sh  while.sh
[root@oracle ~]# mv f1.sh a
[root@oracle ~]# mv f2.sh a/b
[root@oracle ~]# mv for1.sh a/b/c
[root@oracle ~]# ls
a  f4.sh  for2.sh  for4.sh  until.sh  while.sh
[root@oracle ~]# ls a
b  f1.sh
[root@oracle ~]# ls a/b
c  f2.sh
[root@oracle ~]# ls a/b/c
for1.sh
[root@oracle ~]# sh f4.sh 
没有传入参数
[root@oracle ~]# sh f4.sh /root
目录名:/root
目录名:/root/a
目录名:/root/a/b
目录名:/root/a/b/c
/root/a/b/c/for1.sh・・・5
/root/a/b/f2.sh・・・11
/root/a/f1.sh・・・8
/root/f4.sh・・・35
/root/for2.sh・・・5
/root/for4.sh・・・17
/root/until.sh・・・8
/root/while.sh・・・8

#数据库脚本
#sqlplus -S 用户名/密码等
#<EOF
#写一个脚本，查看EMP表中的员工人数
[oracle@oracle ~]$ vim sql1.sh
#!/bin/bash
sqlplus -S scott/scott<<EOF
set heading off
set feedback off
set verify off
set trim on
set trimout on
set echo off
set trimspool on
set pagesize 0
set linesize 300
select count(1) from emp;
exit
EOF

[oracle@oracle ~]$ chmod 755 sql1.sh
[oracle@oracle ~]$ sh sql1.sh 
	14
[oracle@oracle ~]$ vim sql1.sh

#写一个脚本查询出所有部门信息
[oracle@oracle ~]$ vim sql2.sh
#!/bin/bash
sqlplus -S /nolog<<EOF
conn scott/scott
set heading off
set feedback off
set trim on
set trimout on
set termout off
set echo off
set verify off
set pagesize 0
set linesize 200
select * from dept;
exit
EOF
[oracle@oracle ~]$ chmod 755 sql2.sh
[oracle@oracle ~]$ sh sql2.sh 
	10 ACCOUNTING	  NEW YORK
	20 RESEARCH	  DALLAS
	30 SALES	  CHICAGO
	40 OPERATIONS	  BOSTON

[oracle@oracle ~]$ vim sql2.sh 
#!/bin/bash
sqlplus -S /nolog<<EOF
conn scott/scott
set heading off
set feedback off
set trim on
set trimout on
set termout off
set echo off
set verify off
set pagesize 0
set linesize 200
set colsep ','   #设置列间隔符
select * from dept;
exit
EOF

[oracle@oracle ~]$ sh sql2.sh 
	10,ACCOUNTING	 ,NEW YORK
	20,RESEARCH	 ,DALLAS
	30,SALES	 ,CHICAGO
	40,OPERATIONS	 ,BOSTON


#将上面数据保存到一个文件中
#(1)使用linux的文件输出功能
[oracle@oracle ~]$ vim sql2.sh 
#!/bin/bash
sqlplus -S /nolog>dept1.dat<<EOF
conn scott/scott
set heading off
set feedback off
set trim on
set trimout on
set termout off
set echo off
set verify off
set pagesize 0
set linesize 200
set colsep ','
select * from dept;
exit
EOF

[oracle@oracle ~]$ sh sql2.sh
[oracle@oracle ~]$ ls
dept1.dat  sql1.sh  sql2.sh
[oracle@oracle ~]$ cat dept1.dat 
	10,ACCOUNTING	 ,NEW YORK
	20,RESEARCH	 ,DALLAS
	30,SALES	 ,CHICAGO
	40,OPERATIONS	 ,BOSTON

#(2)使用sqlplus的spool命令
[oracle@oracle ~]$ vim sql3.sh
#!/bin/bash
sqlplus -S /nolog<<EOF
conn scott/scott
set heading off
set feedback off
set echo off
set pagesize 100
set linesize 300
set trimspool on
set trim on
set trimout on
set colsep ','
spool /home/oracle/dept2.dat
select * from dept;
spool off
exit
EOF
[oracle@oracle ~]$ chmod 755 sql3.sh
[oracle@oracle ~]$ sh sql3.sh

	10,ACCOUNTING	 ,NEW YORK
	20,RESEARCH	 ,DALLAS
	30,SALES	 ,CHICAGO
	40,OPERATIONS	 ,BOSTON
[oracle@oracle ~]$ ls
dept1.dat  dept2.dat  sql1.sh  sql2.sh  sql3.sh
[oracle@oracle ~]$ cat dept2.dat 

        10,ACCOUNTING    ,NEW YORK
        20,RESEARCH      ,DALLAS
        30,SALES         ,CHICAGO
        40,OPERATIONS    ,BOSTON

[oracle@oracle ~]$ vim sql4.sh
#!/bin/bash
sqlplus -S scott/scott<<EOF
set heading off
set feedback off
set trim on
set trimspool on
set pagesize 0
set linesize 300
set echo off
set timing off
spool /home/oracle/dept3.dat
select deptno||','||dname||','||loc from dept;
spool off
exit
EOF
[oracle@oracle ~]$ chmod 755 sql4.sh
[oracle@oracle ~]$ sh sql4.sh 
10,ACCOUNTING,NEW YORK
20,RESEARCH,DALLAS
30,SALES,CHICAGO
40,OPERATIONS,BOSTON
[oracle@oracle ~]$ cat dept3.dat
10,ACCOUNTING,NEW YORK
20,RESEARCH,DALLAS
30,SALES,CHICAGO
40,OPERATIONS,BOSTON

.dat:data表示数据文件
csv文件:列和列之间以固定的符号分隔开的文件是csv文件

#在shell脚本中和sqlplus之间传递数据
#(1)将shell脚本中变量的值，传sqlplus命令（直接使用shell脚本的取变量值的方式）
#写一个脚本传入一个部门编号，查询该部门下的员工姓名
[oracle@oracle ~]$ vim sql5.sh
#!/bin/bash
#判断是否传入参数
if [[ $# -lt 1 ]];then
  echo 没有传入参数
  exit
fi
#将参数保存到一个变量中(将部门编号保存到变量中)
dno=$1
sqlplus -S scott/scott<<EOF
set heading off
set feedback off
set pagesize 0
set linesize 300
set echo off
set termout off
set trim on
select ename from emp where deptno=$dno;
exit
EOF

[oracle@oracle ~]$ chmod 755 sql5.sh
[oracle@oracle ~]$ sh sql5.sh
没有传入参数
[oracle@oracle ~]$ sh sql5.sh 10
CLARK
KING
MILLER
[oracle@oracle ~]$ sh sql5.sh 20
SMITH
JONES
SCOTT
ADAMS
FORD

#写一个shell脚本，传入一职位，根据职位查询员工姓名
[oracle@oracle ~]$ vim sql6.sh
#!/bin/bash
if [[ $# -lt 1 ]];then
  echo 没有传入参数
  exit
fi
#将传入的职位保存到变量v_job中
v_job=$1
sqlplus -S scott/scott<<EOF
set feedback off
set heading off
set pagesize 0
set linesize 200
set echo off
set trim on
set termout off
set timing off
select ename from emp where job='$v_job';
exit
EOF
[oracle@oracle ~]$ chmod 755 sql6.sh
[oracle@oracle ~]$ sh sql6.sh
没有传入参数
[oracle@oracle ~]$ sh sql6.sh CLERK
SMITH
ADAMS
JAMES
MILLER

#写一个shell脚本，传入一个表名，查询该的所有数据
[oracle@oracle ~]$ vim sql7.sh
#!/bin/bash
if [[ $# -lt 1 ]];then
   echo 没有传入参数 
   exit
fi
#将参数保存到变量中
tab=$1
sqlplus -S scott/scott<<EOF
set feedback off
set heading off
set pagesize 0
set linesize 300
set echo off
set trim on
set termout off
set timing off
set colsep ','
select * from $tab;
exit
EOF

[oracle@oracle ~]$ chmod 755 sql7.sh
[oracle@oracle ~]$ sh sql7.sh 
没有传入参数
[oracle@oracle ~]$ sh sql7.sh dept
	10,ACCOUNTING	 ,NEW YORK
	20,RESEARCH	 ,DALLAS
	30,SALES	 ,CHICAGO
	40,OPERATIONS	 ,BOSTON
(2)怎么将sqlplus的运行结果返回给shell脚本
   shell脚本获取sql运行结果，将sql的运行结果保存到shell变量中
                             将sql的运行结果保存到文件中，通过shell脚本读取文件来获取数据

#写一个脚本，查询员工姓名，并在shell脚本中打印员工姓名
[oracle@oracle ~]$ vim sql8.sh
#!/bin/bash
#查询所有员工的姓名
names=`sqlplus -S scott/scott<<EOF
set heading off
set feedback off
set pagesize 0
set linesize 300
set trim on
set termout off
set echo off
select ename from emp;
exit
EOF`
echo $names


[oracle@oracle ~]$ chmod 755 sql8.sh 
[oracle@oracle ~]$ sh sql8.sh
SMITH ALLEN WARD JONES MARTIN BLAKE CLARK SCOTT KING TURNER ADAMS JAMES FORD MILLER
[oracle@oracle ~]$ vim sql8.sh 
#!/bin/bash
#查询所有员工的姓名
names=`sqlplus -S scott/scott<<EOF
set heading off
set feedback off
set pagesize 0
set linesize 300
set trim on
set termout off
set echo off
select ename from emp;
exit
EOF`
echo $names
for v in $names
do
  echo $v
done

[oracle@oracle ~]$ sh sql8.sh
SMITH ALLEN WARD JONES MARTIN BLAKE CLARK SCOTT KING TURNER ADAMS JAMES FORD MILLER
SMITH
ALLEN
WARD
JONES
MARTIN
BLAKE
CLARK
SCOTT
KING
TURNER
ADAMS
JAMES
FORD
MILLER

[oracle@oracle ~]$ vim sql9.sh
[oracle@oracle ~]$ chmod 755 sql9.sh
[oracle@oracle ~]$ sh sql9.sh
SMITH
ALLEN
WARD
JONES
MARTIN
BLAKE
CLARK
SCOTT
KING
TURNER
ADAMS
JAMES
FORD
MILLER


[oracle@oracle ~]$ vim sql10.sh
[oracle@oracle ~]$ chmod 755 sql10.sh 
[oracle@oracle ~]$ sh sql10.sh 
SMITH	   CLERK
ALLEN	   SALESMAN
WARD	   SALESMAN
JONES	   MANAGER
MARTIN	   SALESMAN
BLAKE	   MANAGER
CLARK	   MANAGER
SCOTT	   ANALYST
KING	   PRESIDENT
TURNER	   SALESMAN
ADAMS	   CLERK
JAMES	   CLERK
FORD	   ANALYST
MILLER	   CLERK
[oracle@oracle ~]$ vim sql10.sh 
#!/bin/bash
datas=`sqlplus -S scott/scott<<EOF
set heading off
set feedback off
set pagesize 0
set linesize 100
set echo off
set trim on
set termout off
select ename,job from emp;
exit
EOF`
echo $datas
[oracle@oracle ~]$ sh sql10.sh 
SMITH CLERK ALLEN SALESMAN WARD SALESMAN JONES MANAGER MARTIN SALESMAN BLAKE MANAGER CLARK MANAGER SCOTT ANALYST KING PRESIDENT TURNER SALESMAN ADAMS CLERK JAMES CLERK FORD ANALYST MILLER CLERK
[oracle@oracle ~]$ vim sql10.sh 
#!/bin/bash
datas=`sqlplus -S scott/scott<<EOF
set heading off
set feedback off
set pagesize 0
set linesize 100
set echo off
set trim on
set termout off
select ename,job from emp;
exit
EOF`
echo $datas

for v in $datas
do
  echo $v
done

[oracle@oracle ~]$ sh sql10.sh 
SMITH CLERK ALLEN SALESMAN WARD SALESMAN JONES MANAGER MARTIN SALESMAN BLAKE MANAGER CLARK MANAGER SCOTT ANALYST KING PRESIDENT TURNER SALESMAN ADAMS CLERK JAMES CLERK FORD ANALYST MILLER CLERK
SMITH
CLERK
ALLEN
SALESMAN
WARD
SALESMAN
JONES
MANAGER
MARTIN
SALESMAN
BLAKE
MANAGER
CLARK
MANAGER
SCOTT
ANALYST
KING
PRESIDENT
TURNER
SALESMAN
ADAMS
CLERK
JAMES
CLERK
FORD
ANALYST
MILLER
CLERK
[oracle@oracle ~]$ vim sql10.sh 
#!/bin/bash
datas=`sqlplus -S scott/scott<<EOF
set heading off
set feedback off
set pagesize 0
set linesize 100
set echo off
set trim on
set termout off
select ename,job from emp;
exit
EOF`
echo $datas
bak=$IFS
IFS=$'\n'
for v in $datas
do
  echo $v
done
IFS=$bak
[oracle@oracle ~]$ sh sql10.sh 
SMITH CLERK ALLEN SALESMAN WARD SALESMAN JONES MANAGER MARTIN SALESMAN BLAKE MANAGER CLARK MANAGER SCOTT ANALYST KING PRESIDENT TURNER SALESMAN ADAMS CLERK JAMES CLERK FORD ANALYST MILLER CLERK
SMITH	   CLERK
ALLEN	   SALESMAN
WARD	   SALESMAN
JONES	   MANAGER
MARTIN	   SALESMAN
BLAKE	   MANAGER
CLARK	   MANAGER
SCOTT	   ANALYST
KING	   PRESIDENT
TURNER	   SALESMAN
ADAMS	   CLERK
JAMES	   CLERK
FORD	   ANALYST
MILLER	   CLERK


[oracle@oracle ~]$ vim sql10.sh 
#!/bin/bash
datas=`sqlplus -S scott/scott<<EOF
set heading off
set feedback off
set pagesize 0
set linesize 100
set echo off
set trim on
set termout off
select ename,job from emp;
exit
EOF`
echo $datas
bak=$IFS
IFS=$'\n'
for v in $datas
do
  name=`echo $v | awk '{ print $1 }'`
  job=`echo $v | awk '{ print $2 }'`
  echo 姓名:$name,职位：$job
done
IFS=$bak
[oracle@oracle ~]$ sh sql10.sh 
SMITH CLERK ALLEN SALESMAN WARD SALESMAN JONES MANAGER MARTIN SALESMAN BLAKE MANAGER CLARK MANAGER SCOTT ANALYST KING PRESIDENT TURNER SALESMAN ADAMS CLERK JAMES CLERK FORD ANALYST MILLER CLERK
姓名:SMITH,职位：CLERK
姓名:ALLEN,职位：SALESMAN
姓名:WARD,职位：SALESMAN
姓名:JONES,职位：MANAGER
姓名:MARTIN,职位：SALESMAN
姓名:BLAKE,职位：MANAGER
姓名:CLARK,职位：MANAGER
姓名:SCOTT,职位：ANALYST
姓名:KING,职位：PRESIDENT
姓名:TURNER,职位：SALESMAN
姓名:ADAMS,职位：CLERK
姓名:JAMES,职位：CLERK
姓名:FORD,职位：ANALYST
姓名:MILLER,职位：CLERK

将下面文件中的数据，导入到数据库中
[oracle@oracle ~]$ cat dept3.dat
10,ACCOUNTING,NEW YORK
20,RESEARCH,DALLAS
30,SALES,CHICAGO
40,OPERATIONS,BOSTON

[oracle@oracle ~]$ vim sql11.sh
#!/bin/bash
#读取文件的内容
while read line
do
  #每行数据的处理
  dno=$( echo $line | awk -F ',' '{ print $1 }' )
  dname=$( echo $line | awk -F ',' '{ print $2 }' )
  loc=$( echo $line | awk -F ',' '{ print $3 }' )
  #将数据插入到数据库
  sqlplus -S scott/scott<<EOF
  set heading off
set feedback off
set echo off
set trim on
insert into dept1 values($dno,'$dname','$loc');
exit
EOF
done<dept3.dat
[oracle@oracle ~]$ chmod 755 sql11.sh 
[oracle@oracle ~]$ vim sql11.sh 
[oracle@oracle ~]$ sh sql11.sh


sqlldr命令，数据库中导入数据文件的命令
sqlldr [userid=]用户名/密码@ip:端口/实例名
       control=控制文件路径
       data=数据文件路径,例如dept3.dat文件的路径
       bad=存储坏数据的文件路径，系统一个保存错误数据的文件
       error=允许导入时出现多少个错误，数字类型值
       skip=跳过几行数据，数字类型值
       log=日志文件路径
       rows=n  #表示多少行提交一次事务

控制文件.ctl文件
文件格式
load data
infile '数据文件路径'
insert|update|truncate|replace|delete
into table 表名
fields terminated by ',' #表示指定列和列之间的分隔符
optionally enclosed by '' #指定列的包围符号的
trailing nulcols      #允许列的值是空
(
  列名 [filter],   #列对应的字符名 filter表示过滤掉该字段
  列名 [filter] date '日期格式',
  列名 
)


[oracle@oracle ~]$ vim dept.ctl
load data
insert
into table dept2
fields terminated by ','
trailing nullcols
(
  deptno,
  dname,
  loc
)

[oracle@oracle ~]$ sqlldr scott/scott control=dept.ctl data=dept3.dat log=sqlldr_dept.log bad=dept_bad.txt errors=2 skip=0 rows=2

SQL*Loader: Release 11.2.0.1.0 - Production on Tue Jan 26 10:12:26 2021

Copyright (c) 1982, 2009, Oracle and/or its affiliates.  All rights reserved.

Commit point reached - logical record count 2
Commit point reached - logical record count 4


emp.ctl文件内容
load data
insert    #insert
into table emp1   #插入的表
fields terminated by ','  #列分隔符
optionally enclosed '"'  #列包围符号
trailing nullcols    #允许插入空值
(
 empno,
 ename,
 job,
 mgr,
 hiredate date'yyyy/mm/dd',
 sal,
 comm,
 deptno
)

导入命令
sqlldr scott/scott control=emp.ctl data=emp.csv log=sqlldr_emp.log bad=emp.txt rows=5 errors=2 skip=1


数据库的导入和导出命令
exp/imp:导出/导入
exp导出命令
  
exp [userid=] 用户名/密码@ip:端口/实例名  #连接数据库的
    file='导出文件路径'  #导出的dmp文件路径dump 
    log='导出日志文件路径'  #设置日志文件路径的
    full=y|n     #设置是否全库导出
    owner=模式名  #配置按模式导出数据，模式（用户名）
    tables=表名,表名2,...   #配置导出的数据库表
    ignore=y|n    #是否忽略错误
    indexes=y|n   #设置是否导出索引
注意：导数据库时，一般使用管理员用户
全库导出
exp system/"oracle"@orcl file='/home/oracle/all.dmp' log='/home/oracle/exp_all.log' full=y indexes=n

按用户导出
exp system/"oracle"@orcl file='/home/oracle/scott.dmp' log='/home/oracle/exp_scott.log' owner=scott indexes=n

按表导出
exp system/"oracle"@orcl file='/home/oracle/tabs.dmp' log='/home/oracle/exp_tabs.log' tables=scott.dept,scott.emp indexes=n

注意：full，owner,table不联用

imp命令
imp [userid=]用户名/密码@ip:端口/实例 
    file='导出的dmp文件路径'
    log='导入的日志文件路径'
    full=y|n #是否全库导入
    fromuser=导出的模式名  #根据导出文件中导出时使用的模式名（用户名）
    touser=导入的模式名    #导入时使用的模式名(用户名)
    tables=表名,表名,...
全库导入
imp system/"oracle" file='/home/oracle/all.dmp' log='/home/oracle/imp_all.log' full=y


--创建表空间和临时表空间
create tablespace dt_data datafile '/u01/app/oracle/oradata/orcl/dt_data.dbf' size 1G autoextend on next 100M maxsize unlimited;
create temporary tablespace dt_temp tempfile '/u01/app/oracle/oradata/orcl/dt_temp.dbf' size 1G autoextend on next 100M maxsize unlimited;

--创建用户
create user dtuser default tablespace dt_data temporary tablespace dt_temp identified by 123456;

--给用户赋权限
grant resource,connect to dtuser;
按用户导入
imp system/"oracle" file='/home/oracle/scott.dmp' log='/home/oracle/imp_soctt.log' fromuser=scott touser=dtuser
按表导入
imp system/"oracle" file="/home/oracle/tabs.dmp" log='/home/oracle/imp_tabs.log' fromuser=scott touser=dtuser tables=dept,emp

expdp/impdp:数据库泵导出/导入
expdp导出命令
expdp [userid=]用户名/密码@ip:端口/实例名
      directory=目录名称   #是oracle中directory对象的名字
      dumpfile=dmp文件名  #导出时dmp文件的名字
      logfile=日志文件名   #导出日志的文件名字
      full=y|n     #表示是否全库导出
      schemas=模式名 #相当于exp命令中的owner 模式名（用户名）
      tables=表名,表名,..  #设置需要导出的表名

创建导库目录：
create directory dmppath as '/home/oracle/data';

全库导出
expdp system/oracle@orcl directory='DMPPATH' dumpfile='all.dmp' logfile='all.log' full=y

按用户导出
expdp system/oracle@orcl directory='DMPPATH' dumpfile='scott.dmp' logfile='scott.log' schemas=scott

按表导出
expdp system/oracle@orcl directory='DMPPATH' dumpfile='tabs.dmp' logfile='tabs.log' tables=scott.dept,scott.emp


impdp导入命令
impdp [userid=]用户名/密码@ip:端口/实例名
      directory='目录名称'
      dumpfile='导出的dmp文件名'
      logfile='导入日志文件名'
      full=y|n  #是否全库导入
      remap_schema=原模式:新模式  #remap_schema相当于imp中的fromuser和touser
      tables=表名,表名
全库导入
impdp system/oracle@orcl directory='DMPPATH' dumpfile='all.dmp' logfile='impdp_all.log' full=y

按用户导入
impdp system/oracle directory='DMPPATH' dumpfile='scott.dmp' logfile='impdp_scott.log' remap_schema=scott:dtuser

按表导入
impdp system/oracle directory='DMPPATH' dumpfile='tabs.dmp' logfile='impdp_tabs.log' remap_schema=scott:dtuser tables=scott.dept,scott.emp

导库脚本
[oracle@oracle ~]$ vim exp.sh
#!/bin/bash
#使用导出命令，导出dmp文件 exp  expdp
exp system/oracle@192.168.22.120:1521/orcl file=/home/oracle/exp_$$.dmp log=/home/oracle/exp_$$.log owner=scott
#将dmp文件进行压缩 zip tar
zip /home/oracle/exp_$$.dmp.zip /home/oracle/exp_$$.dmp
#将dmp文件拷贝到指定目录cp scp ftp
scp -r /home/oracle/exp_$$.dmp.zip oracle@192.168.22.120:/home/oracle/data

[oracle@oracle ~]$ chmod 755 exp.sh
[oracle@oracle ~]$ sh exp.sh




[oracle@oracle ~]$ vim exp1.sh 
#!/bin/bash
#导出数据库用户名配置
dbuser=system
#导出数据库用户密码
dbpasswd=oracle
#导出数据库的数据库连接串
dburl=192.168.22.120:1521/orcl

#生成当前日期和时间
dt=`date +%Y%m%d%H%M%S`
#配置导出目录
expdir=/home/oracle
#设置导出文件名
dmpname=exp_${dt}.dmp
#设置导出日志文件名
logname=log_${dt}.log
#设置导出模式名(用户名)
schema=scott

#配置scp远程服务器用户名
scpuser=oracle
#配置远程服务器地址
scpurl=192.168.22.120
#配置远程服务器路径
scpdir=/home/oracle/data
#使用导出命令，导出dmp文件 exp  expdp
exp $dbuser/$dbpasswd@$dburl file=$expdir/$dmpname log=$expdir/$logname owner=$schema
#将dmp文件进行压缩 zip tar
zip $expdir/${dmpname}.zip $expdir/$dmpname
#将dmp文件拷贝到指定目录cp scp ftp
scp -r $expdir/${dmpname}.zip $scpuser@$scpurl:$scpdir

[oracle@oracle ~]$ chmod 755 exp1.sh
[oracle@oracle ~]$ sh exp1.sh 


数据库连接信息会单独创建一个文件env.sh
[oracle@oracle ~]$ vim env.sh
[oracle@oracle ~]$ cat env.sh
#!/bin/bash
#配置数据库用户
dbuser=system
#导出数据库用户密码
dbpasswd=oracle
#导出数据库的数据库连接串
dburl=192.168.22.120:1521/orcl

编辑导库脚本：
[oracle@oracle ~]$ vim exp2.sh 
#!/bin/bash
#导入环境配置
#. 配置文件路径  例如：. ./env.sh
#source 配置文件路径  例如 source ./env.sh
source ./env.sh
dt=`date +%Y%m%d%H%M%S`
expdir=/home/oracle
dmpname=exp_${dt}.dmp
logname=log_${dt}.log

scpuser=oracle
scpurl=192.168.22.120
scpdir=/home/oracle/data
#使用导出命令，导出dmp文件 exp  expdp
exp $dbuser/$dbpasswd@$dburl file=$expdir/$dmpname log=$expdir/$logname owner=scott
#将dmp文件进行压缩 zip tar
zip $expdir/${dmpname}.zip $expdir/$dmpname
#将dmp文件拷贝到指定目录cp scp ftp
scp -r $expdir/${dmpname}.zip $scpuser@$scpurl:$scpdir


导入脚本将导出脚本的返回过来写即可
    （1）将数据库dmp文件的压缩包，拷贝到数据库服务器
     (2) 将压缩文件进行解压
     (3) 使用导入命令，将dmp文件导入到数据库中

注意：导库时，在导入时可以会出现没有表空间而导致数据库表导入失败
create table 表名(
  列名 数据类型

)tablespace 表空间名称


定时任务
crontab 
  -l:查看当前的定时任务
  -e:编辑定时任务
  -r:删除所有的定时任务

定时任务的格式
*：表示当前单位的所有的时间
n1-n2：表示取一个范围
/:表示每
n1,n2,...:表示在这些值之内
分钟	小时	日	月	星期	命令
0~59	0~23	1~31	1~12	1~7	
*/1	*	*	*	*	ls   #表示每隔一分钟执行一次ls命令
30	6	*	*	*	ls   #表示每天的6点半执行一次ls命令
*/15    8-10	*	*	*	ls   #表示每天的8点到10点，每隔15分钟执行一次ls命令
10	6,18	*	*	*	ls   #表示在每天的6点10分和18点10分各执行一次ls命令
30	8	*	*	1	ls   #表示在每周一的8点30分执行一次ls命令

写一个定时任务，在每隔一分钟，打印当前的日期和时间
[oracle@oracle ~]$ vim date.sh
#!/bin/sh
date "+%Y-%m-%d %H:%M:%S" >>/home/oracle/date.log

[oracle@oracle ~]$ chmod 755 date.sh
[oracle@oracle ~]$ sh date.sh
[oracle@oracle ~]$ cat date.log
2021-01-27 14:15:12
[oracle@oracle ~]$ sh date.sh
[oracle@oracle ~]$ cat date.log
2021-01-27 14:15:12
2021-01-27 14:15:21


定时任务的添加有两种方式
（1）使用crontab -e去添加（它的操作和vim命令编辑文件是一样的）
 [oracle@oracle ~]$ crontab -e
 */1	*	*	*	*	sh /home/oracle/date.sh
no crontab for oracle - using an empty one
crontab: installing new crontab
[oracle@oracle ~]$ crontab -l
*/1	*	*	*	*	sh /home/oracle/date.sh
[oracle@oracle ~]$ tail -f date.log
2021-01-27 14:15:12
2021-01-27 14:15:21
2021-01-27 14:19:01
2021-01-27 14:20:01
2021-01-27 14:21:01
[oracle@oracle ~]$ crontab -r
[oracle@oracle ~]$ crontab -l
no crontab for oracle

（2）创建一个定时任务文件
 [oracle@oracle ~]$ vim cron
[oracle@oracle ~]$ cat cron
*/1	*	*	*	*	sh /home/oracle/date.sh
[oracle@oracle ~]$ crontab cron  #将文件cron中编辑的定时任务加载到定时任务列表
[oracle@oracle ~]$ crontab -l
*/1	*	*	*	*	sh /home/oracle/date.sh

当使用第2种方式添加的定时任务，使用-r删除后，cron文件中的内容不会被删除 
[oracle@oracle ~]$ crontab -l
*/1	*	*	*	*	sh /home/oracle/date.sh
[oracle@oracle ~]$ crontab -r
[oracle@oracle ~]$ crontab -l
no crontab for oracle
[oracle@oracle ~]$ cat cron 
*/1	*	*	*	*	sh /home/oracle/date.sh
[oracle@oracle ~]$ crontab cron
[oracle@oracle ~]$ crontab -l
*/1	*	*	*	*	sh /home/oracle/date.sh


oracle的数据库
服务端：数据库软件，监听程序，数据库实例（可以存储数据的）
客户端: 只一个软件，可以通过客户端来连接数据库
tnsnames.ora配置文件
oracle连接工具在使用时，必须在电脑上安装一个客户端程序（服务端，客户端，instanceclient插件）

oracle instanceclient插件配置
(1)从官网下载插件包
(2)将ojdbc6.jar包放入解压后的文件夹中
(3)将tnsnames.ora文件放到该目录下(不是必要的，
  tnsnames文件位置：oracle的安装目录下network/admin/目录下
                    例如：d:/app/Administrator/product/11.2.0/dbhome_1/network/admin
		          /u01/app/oracle/product/11.2.0/network/admin)
(4)配置环境变量，在环境变量中添加如果内容
 TNS_ADMIN=D:\instantclient_11_2
(5)在IDE工具中配置

数据库中文乱码：
(1)获取到当前数据库服务器上的字符编码
select userenv('language') from dual;
select * from nls_database_parameters;
(2)修改本地的编码
添加一个环境变量NLS_LANG(添加在当前用户的环境变量上)



(1)检查网络是否连通
   ping ip地址
   如果网络不能，问题网络问题
   如果网络正常，进行下一步检查
(2)检查监听器是否开启
   telnet命令(windows电脑是默认不开启)
   打开telnet服务的方法：
    控制面板-->程序和功能-->打开或关闭windows功能--telnet 客户端(Telnet Client)
   telnet ip地址 端口号
   telnet 192.168.22.120 1521

   如果telnet可以连通，说明oracle的监听器是启动的
   如果telnet不能连通，说明（1）服务器上oracle的监听器没有打开
                            (2) 没有设置防火墙（给防火墙开放端口，或者关闭防火墙）
   
(3)检查数据实例是否启动（需要在服务器上检查）
   服务器上执行lsnrctl status
 